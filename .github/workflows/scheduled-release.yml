name: Frequent Milestone Release

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch: # Allows manual execution

jobs:
  get_pr_details:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch issues linked to milestone
        id: fetch_issues
        env:
          MILESTONE_NUMBER: ${{ secrets.MILESTONES_NUM }}
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/issues?milestone=${{ env.MILESTONE_NUMBER }}&state=closed"
          echo "Fetching issues from: $API_URL"

          ISSUES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
          echo "Fetched issues: $ISSUES"

          # Extract issue numbers
          ISSUE_NUMBERS=$(echo "$ISSUES" | jq -r '.[] | select(.pull_request == null) | .number')

          if [[ -z "$ISSUE_NUMBERS" || "$ISSUE_NUMBERS" == "null" ]]; then
            echo "No issues found."
            ISSUE_NUMBERS=""
          fi

          echo "ISSUE_NUMBERS<<EOF" >> $GITHUB_ENV
          echo "$ISSUE_NUMBERS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Fetch PRs linked to issues
        id: fetch_prs
        env:
          ISSUE_NUMBERS: ${{ env.ISSUE_NUMBERS }}
        run: |
          if [[ -z "$ISSUE_NUMBERS" ]]; then
            echo "No issues found, skipping PR fetching."
            exit 0
          fi

          PR_LIST=""
          for ISSUE in $ISSUE_NUMBERS; do
            API_URL="https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE/timeline"
            echo "Fetching PR details from: $API_URL"

            PR_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL" \
              | jq -r '.[] | select(.event == "cross-referenced" and .source.issue.pull_request != null) | .source.issue')

            echo "Fetching PR_DATA from: $PR_DATA"

            PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.user.login')
            PR_HTML_URL=$(echo "$PR_DATA" | jq -r '.html_url')

            if [[ -n "$PR_TITLE" && "$PR_TITLE" != "null" ]]; then
              PR_LIST+="* $PR_TITLE by @$PR_AUTHOR in $PR_HTML_URL"$'\n'
            fi
          done

          if [[ -z "$PR_LIST" ]]; then
            PR_LIST="No PRs linked to issues."
          fi

          echo "PR_LIST<<EOF" >> $GITHUB_ENV
          echo "$PR_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  # create_release:
  #   needs: get_pr_details
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Read version from package.json
  #       id: get_version
  #       run: |
  #         VERSION=$(jq -r '.version' package.json)
  #         if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
  #           echo "Version not found in package.json"
  #           exit 1
  #         fi
  #         echo "version=v$VERSION" >> $GITHUB_ENV

  #     - name: Create GitHub Release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         MILESTONE_NUMBER: ${{ secrets.MILESTONES_NUM }}
  #       run: |
  #         REPO_URL="https://github.com/${{ github.repository }}"
  #         RELEASE_BODY="$(cat <<EOF
  #         ## What's Changed
  #         ${{ env.PR_LIST }}

  #         **Full Changelog**: ${REPO_URL}/commits/${{ env.version }}
  #         EOF
  #         )"

  #         API_URL="https://api.github.com/repos/${{ github.repository }}/releases"
  #         echo "Creating release via API: $API_URL"

  #         curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
      
