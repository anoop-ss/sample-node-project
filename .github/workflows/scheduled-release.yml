name: Frequent Milestone Release

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch: # Allows manual execution

jobs:
  check_milestones:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get milestone status
        id: check_milestone
        env:
          MILESTONES: ${{ secrets.MILESTONES }} # Comma-separated list of milestone names
        run: |
          IFS=',' read -r -a MILESTONE_LIST <<< "$MILESTONES"

          for MILESTONE in "${MILESTONE_LIST[@]}"; do
            MILESTONE_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/milestones" \
              | jq -r --arg MILESTONE "$MILESTONE" '.[] | select(.title == $MILESTONE and .open_issues == 0)')

            MILESTONE_TITLE=$(echo "$MILESTONE_DATA" | jq -r '.title')
            MILESTONE_DESC=$(echo "$MILESTONE_DATA" | jq -r '.description')
            MILESTONE_NUMBER=$(echo "$MILESTONE_DATA" | jq -r '.number')

            if [[ -n "$MILESTONE_TITLE" && "$MILESTONE_TITLE" != "null" ]]; then
              echo "Found completed milestone: $MILESTONE_TITLE"
              echo "milestone=$MILESTONE_TITLE" >> $GITHUB_ENV
              echo "milestone_desc=$MILESTONE_DESC" >> $GITHUB_ENV
              echo "milestone_number=$MILESTONE_NUMBER" >> $GITHUB_ENV
              exit 0
            fi
          done

          echo "No completed milestone found"
          exit 1

  get_pr_details:
    needs: check_milestones
    runs-on: ubuntu-latest
    steps:
      - name: Fetch PR titles, authors & links
        id: fetch_prs
        run: |
          PR_LIST=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&milestone=${{ secrets.MILESTONES_NUM }}" \
            | jq -r '.[] | "* " + .title + " by @" + .user.login + " in " + .html_url')

          if [[ -z "$PR_LIST" ]]; then
            PR_LIST="No pull requests merged."
          fi

          NEW_CONTRIBUTORS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&milestone=${{ secrets.MILESTONES_NUM }}" \
            | jq -r '[.[] | select(.author_association == "FIRST_TIMER")] | map("* @" + .user.login + " made their first contribution in " + .html_url) | join("\n")')

          if [[ -z "$NEW_CONTRIBUTORS" ]]; then
            NEW_CONTRIBUTORS="No new contributors."
          fi

          echo "pr_list<<EOF" >> $GITHUB_ENV
          echo "$PR_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "new_contributors<<EOF" >> $GITHUB_ENV
          echo "$NEW_CONTRIBUTORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  create_release:
    needs: [check_milestones, get_pr_details]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            echo "Version not found in package.json"
            exit 1
          fi
          echo "version=v$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_URL="https://github.com/${{ github.repository }}"
          RELEASE_BODY="${{ env.milestone_desc }}

          ## Merged Pull Requests:
          ${{ env.pr_list }}

          ## What's Changed
          ${{ env.pr_list }}

          ## New Contributors
          ${{ env.new_contributors }}

          **Full Changelog**: ${REPO_URL}/commits/${{ env.version }}"

          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "${{ env.version }}",
              "name": "${{ env.version }}",
              "body": "'"${RELEASE_BODY//$'\n'/'\n'}"'",
              "draft": false,
              "prerelease": false
            }'

          echo "Release created successfully"

  close_milestone:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Close the milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/milestones/${{ secrets.MILESTONES_NUM }} \
            -d '{"state": "closed"}'
          echo "Milestone closed successfully"
