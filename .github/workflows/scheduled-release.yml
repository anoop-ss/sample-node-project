name: Frequent Milestone Release

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch: # Allows manual execution

jobs:
  get_pr_details:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch PR titles, authors & links
        id: fetch_prs
        env:
          MILESTONE_NUMBER: ${{ secrets.MILESTONES_NUM }}
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&milestone=${{ env.MILESTONE_NUMBER }}"
          echo "Fetching PR details from: $API_URL"

          PR_LIST=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL" \
            | jq -r '.[] | "* " + .title + " by @" + .user.login + " in " + .html_url')

          if [[ -z "$PR_LIST" ]]; then
            PR_LIST="No pull requests merged."
          fi

          echo "PR_LIST<<EOF" >> $GITHUB_ENV
          echo "$PR_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Fetch new contributors
        id: fetch_contributors
        env:
          MILESTONE_NUMBER: ${{ secrets.MILESTONES_NUM }}
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&milestone=${{ env.MILESTONE_NUMBER }}"
          echo "Fetching new contributors from: $API_URL"

          NEW_CONTRIBUTORS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL" \
            | jq -r '[.[] | select(.author_association == "FIRST_TIMER")] | map("* @" + .user.login + " made their first contribution in " + .html_url) | join("\n")')

          if [[ -z "$NEW_CONTRIBUTORS" || "$NEW_CONTRIBUTORS" == "null" ]]; then
            NEW_CONTRIBUTORS="No new contributors."
          fi

          echo "NEW_CONTRIBUTORS<<EOF" >> $GITHUB_ENV
          echo "$NEW_CONTRIBUTORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  create_release:
    needs: get_pr_details
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            echo "Version not found in package.json"
            exit 1
          fi
          echo "version=v$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MILESTONE_NUMBER: ${{ secrets.MILESTONES_NUM }}
        run: |
          REPO_URL="https://github.com/${{ github.repository }}"
          RELEASE_BODY="$(cat <<EOF
          ## Merged Pull Requests:
          ${{ env.PR_LIST }}

          ## What's Changed
          ${{ env.PR_LIST }}

          ## New Contributors
          ${{ env.NEW_CONTRIBUTORS }}

          **Full Changelog**: ${REPO_URL}/commits/${{ env.version }}
          EOF
          )"

          API_URL="https://api.github.com/repos/${{ github.repository }}/releases"
          echo "Creating release via API: $API_URL"

          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$API_URL" \
            -d '{
              "tag_name": "${{ env.version }}",
              "name": "${{ env.version }}",
              "body": "'"${RELEASE_BODY//$'\n'/'\n'}"'",
              "draft": false,
              "prerelease": false
            }'

          echo "Release created successfully"

  close_milestone:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Close the milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MILESTONE_NUMBER: ${{ secrets.MILESTONES_NUM }}
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/milestones/${{ env.MILESTONE_NUMBER }}"
          echo "Closing milestone using API: $API_URL"

          curl -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$API_URL" \
            -d '{"state": "closed"}'
          
          echo "Milestone closed successfully"
